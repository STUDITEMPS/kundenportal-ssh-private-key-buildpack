#!/usr/bin/env bash

ENV_DIR=${3:-}

if [[ ! -s "$ENV_DIR/PRIVATE_REPOSITORIES" ]] && [[ ! -s "$ENV_DIR/SSH_KEY" ]]; then
  echo "-----> Skipping SSH private key setup: No private repositories"
	exit 0
fi

# The .ssh needs to be located in the home directory which is different to the
# home directory of the built machine. The symlink resolves the issue.
mkdir "$1/.ssh"
ln -s "$1/.ssh" "$HOME/.ssh"
# add github.com to the known hosts
echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" > "$HOME/.ssh/known_hosts"

if [[ -s "${ENV_DIR}/SSH_KEY" ]]; then
  echo "-----> Running SSH private key setup."

	function indent() {
				c='s/^/       /'
				case $(uname) in
								Darwin) sed -l "$c";;
								*)      sed -u "$c";;
				esac
	}

	ssh_hosts=${SSH_HOSTS:-"git@github.com"}

	cat "${ENV_DIR}/SSH_KEY" | base64 --decode > "$HOME/.ssh/id_rsa"
	IFS=',' read -ra HOST <<< "$ssh_hosts"
	for host in "${HOST[@]}"; do
		ssh -oStrictHostKeyChecking=no -T $host 2>&1 | indent
	done
else
	IFS=',' private_repositories=($([ -f $ENV_DIR/PRIVATE_REPOSITORIES ] && cat $ENV_DIR/PRIVATE_REPOSITORIES))
	echo "-----> Running SSH private key setup for ${#private_repositories[@]} repositories."

	github_org=${GITHUB_ORGANIZATION:-"STUDITEMPS"}

	for repo in ${private_repositories[@]}; do
		ssh_key="$([ -f $ENV_DIR/${repo^^}_SSH_PRIVATE_KEY ] && cat $ENV_DIR/${repo^^}_SSH_PRIVATE_KEY)"
		if [ "${ssh_key}" = "" ]; then
			echo "MISSING KEY: Expected \`${repo^^}_SSH_PRIVATE_KEY\` to provide ssh private key"
			exit 1
		fi

		echo "${ssh_key}" | base64 --decode > "$HOME/.ssh/${repo}"
		pseudo_host="${repo}.${github_org}.github.com"
		echo "
			Host ${pseudo_host}
				Hostname github.com
				StrictHostKeyChecking no
				User git
				IdentityFile ~/.ssh/${repo}
				IdentitiesOnly yes
		" >> "$HOME/.ssh/config"

		git config --global url."git@${pseudo_host}:${github_org}/${repo}".insteadOf "git@github.com:${github_org}/${repo}"

		if git ls-remote "git@github.com:${github_org}/${repo}" 2>&1 > /dev/null; then
			echo "SSH-Setup for git@github.com:${github_org}/${repo} was successful."
		else
			echo "Failed to access git@github.com:${github_org}/${repo}"
			exit 1
		fi
	done
fi
